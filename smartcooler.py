# -*- coding: utf-8 -*-
"""smartcooler.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/194gatEbU0BvU25OdSe72uWdZE-bIGkO-
"""

import numpy as np
import pandas as pd
from sklearn import datasets
from sklearn.model_selection import train_test_split

dfwithout=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/INTERNSHIP/Chiller1 ML Data.csv')
dfsmartcool=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/INTERNSHIP/Chiller1 ML Data-without.csv')

dfwithout.head()

dfsmartcool.head()

print(dfwithout.shape)
print(dfsmartcool.shape)

dfwithout.isnull().sum()

dfsmartcool.isnull().sum()

#the parameters required to train the model
dfsmartcool=dfsmartcool.drop(labels=["DateValue","HourValue","TimeValue","Evap Leaving Temp","Evap Entering Temp","Evpt Rfgt Pressure","Evap Sat Rfgt Temp","Cond Entering Temp","Cond Leaving Temp","Condenser Rfgt Pressure","Cond Sat Rfgt Temp","Avg Setpoint","Active chilled setpoint source"],axis=1)

#the parameters required to train the model
dfwithout=dfwithout.drop(labels=["DateValue","HourValue","TimeValue","Evap Leaving Temp","Evap Entering Temp","Evpt Rfgt Pressure","Evap Sat Rfgt Temp","Cond Entering Temp","Cond Leaving Temp","Condenser Rfgt Pressure","Cond Sat Rfgt Temp","Avg Setpoint","Active chilled setpoint source"],axis=1)

dfsmartcool.shape

dfwithout.shape

features_smart=pd.DataFrame(dfsmartcool,columns=["SetPoint","Load","Temperature","Humidity","DewPoint"])
Target_smart=pd.DataFrame(dfsmartcool,columns=["EnergyConsumption"])

features_without=pd.DataFrame(dfwithout,columns=["SetPoint","Load","Temperature","Humidity","DewPoint"])
Target_without=pd.DataFrame(dfwithout,columns=["EnergyConsumption"])

from sklearn.model_selection import train_test_split  #load temperature humidity dewpoint setpoint
features_train_smart,features_test_smart,Target_train_smart,Target_test_smart=train_test_split(features_smart,Target_smart,test_size=0.30,random_state=1)

from sklearn.model_selection import train_test_split  #load temperature humidity dewpoint setpoint
features_train_without,features_test_without,Target_train_without,Target_test_without=train_test_split(features_without,Target_without,test_size=0.30,random_state=1)

features_train_smart=features_train_smart.replace(np.inf,0)
features_train_smart=features_train_smart.replace(np.NaN,0)
features_test_smart=features_test_smart.replace(np.NaN,0)

features_train_without=features_train_without.replace(np.inf,0)
features_train_without=features_train_without.replace(np.NaN,0)
features_test_without=features_test_without.replace(np.NaN,0)

from sklearn.ensemble import RandomForestRegressor

regressor_smart = RandomForestRegressor(n_estimators=10, random_state=0) #n_estimators means that the no of tress the alogirthm is drawing to make the model
regressor_smart.fit(features_train_smart, Target_train_smart) #randomstate=0 means that for every execution the training set is the same
Target_pred_smart = regressor_smart.predict(features_test_smart)

from sklearn.ensemble import RandomForestRegressor

regressor_without = RandomForestRegressor(n_estimators=50, random_state=0) #n_estimators means that the no of tress the alogirthm is drawing to make the model
regressor_without.fit(features_train_without, Target_train_without) #randomstate=0 means that for every execution the training set is the same
Target_pred_without = regressor_without.predict(features_test_without)

from sklearn import metrics

print('Mean Absolute Error:', metrics.mean_absolute_error(Target_test_smart, Target_pred_smart))  #|yi-xi|/n
print('Mean Squared Error:', metrics.mean_squared_error(Target_test_smart, Target_pred_smart))    #(yi-xi)^2/n
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Target_test_smart, Target_pred_smart)))  #root(yi-xi)^2/n

from sklearn import metrics

print('Mean Absolute Error:', metrics.mean_absolute_error(Target_test_without, Target_pred_without))  #|yi-xi|/n
print('Mean Squared Error:', metrics.mean_squared_error(Target_test_without, Target_pred_without))    #(yi-xi)^2/n
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Target_test_without, Target_pred_without)))  #root(yi-xi)^2/n

regressor_smart.score(features_test_smart,Target_test_smart)#RMSE is very less so there in no need of changing the value of parameter of no of treess taken.

regressor_without.score(features_test_without,Target_test_without)#RMSE is very less so there in no need of changing the value of parameter of no of treess taken.

print(Target_train_smart)

Target_pred_train_smart = regressor_smart.predict(features_train_smart)
print(Target_pred_train_smart)

print(Target_train_without)

Target_pred_train_without = regressor_without.predict(features_train_without)
print(Target_pred_train_without)