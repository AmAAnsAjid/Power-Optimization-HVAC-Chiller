# -*- coding: utf-8 -*-
"""chiller1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I545j3pvhTvy-NW0xsbhGzGCSjFDxjmO
"""

import numpy as np
import pandas as pd
from sklearn import datasets
from sklearn.model_selection import train_test_split

df=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Chiller2 Hourly Data.csv')
df.shape

df.head()

import matplotlib.pyplot as plt
plt.xlabel('DateValue')
plt.ylabel('EnergyConsumption')
plt.plot(df.DateValue,df.EnergyConsumption)

df.isnull().sum()

#because dateValue doesnt depend on anything and ActiveCurrent limit has always been 100 so it independent of the data
X=df.drop(labels=["Active Current Limit Setpoint","Condenser Rfgt  Pressure","DateValue"],axis=1)
X.shape

X.head()

features=pd.DataFrame(X,columns=["Evap Leaving Water Temp","Cond Entering Water Temp","Cond Leaving  Water Temp","Evpt Rfgt Pressure","Condenser Rfgt Pressure","Oil Pump Discharge Pressure","Oil Tank Temperature","Evap Sat Rfgt Temp","Cond Sat Rfgt Temp","Setpoint","Power","Starter Average Phase Voltage"," Motor Winding Temp 1"," Motor Winding Temp 2"," Motor Winding Temp 3","Load","Condenser Rfgt  Pressure","Temperature","Humidity","DewPoint"])
Target=pd.DataFrame(X,columns=["EnergyConsumption"])

df[df.columns[1:]].corr()['EnergyConsumption'][:]# if the corelations is equal to 1 then the feature and target is linearly related and if it is equal to 0 then there is no relation between them

from sklearn.model_selection import train_test_split  #load temperature humidity dewpoint setpoint
features_train,features_test,Target_train,Target_test=train_test_split(features,Target,test_size=0.30,random_state=1)

features_train=features_train.replace(np.inf,0)
features_train=features_train.replace(np.NaN,0)
features_test=features_test.replace(np.NaN,0)

from sklearn.ensemble import RandomForestRegressor

regressor = RandomForestRegressor(n_estimators=20, random_state=0) #n_estimators means that the no of tress the alogirthm is drawing to make the model
regressor.fit(features_train, Target_train) #randomstate=0 means that for every execution the training set is the same
Target_pred = regressor.predict(features_test)

from sklearn import metrics

print('Mean Absolute Error:', metrics.mean_absolute_error(Target_test, Target_pred))  #|yi-xi|/n
print('Mean Squared Error:', metrics.mean_squared_error(Target_test, Target_pred))    #(yi-xi)^2/n
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Target_test, Target_pred)))  #root(yi-xi)^2/n

regressor.score(features_test,Target_test)#RMSE is very less so there in no need of changing the value of parameter of no of treess taken.

print(Target_train)

Target_pred_train = regressor.predict(features_train)
print(Target_pred_train)

target_pred_train=pd.DataFrame(Target_pred_train)
target_train=pd.DataFrame(Target_pred_train)
target_train.to_excel(excel_writer='/content/drive/MyDrive/Colab Notebooks/output.xlsx',index=False)